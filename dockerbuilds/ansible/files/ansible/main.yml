- hosts: localhost
  gather_facts: no
  tasks:
    - block:

      - name: Getting default vpc id
        shell: aws ec2 describe-vpcs | grep VpcId  | awk -F '"' '{print $4}' | head -n 1
        register: vpc_id
      
      - debug:
          var: "{{vpc_id}}"

      - name: Getting Subnets
        ec2_vpc_subnet_facts:
          filters:
            vpc-id: "{{vpc_id.stdout_lines.0}}"
        register: subnet_facts

      - set_fact:
          subnet_ids: "{{subnet_facts.subnets|map(attribute='id')|list }}"
          vpc_id: "{{vpc_id.stdout_lines.0}}"

      - name: Create subnet group for elasticache
        elasticache_subnet_group:
          state: present
          name: EC-subnet-group
          description: Elasticache subnet group
          subnets:
            - "{{ subnet_ids.0 }}"
            - "{{ subnet_ids.1 }}"
            - "{{ subnet_ids.2 }}"

      - name: Create subnet group for RDS
        rds_subnet_group: 
          state: present
          name: PG-subnet-group
          description: Postgres subnet for airflow
          subnets:
            - "{{ subnet_ids.0 }}"
            - "{{ subnet_ids.1 }}"
            - "{{ subnet_ids.2 }}"

      - name: Create Redis cluster
        elasticache:
          name: "redis-test"
          state: present
          engine: redis
          node_type: cache.m1.small
          num_nodes: 1
        register: redis_output

      - name: Create postgresql Security group
        ec2_group:
          name: postgresdb sec
          description: Postgresql DB Sec Group
          vpc_id: "{{vpc_id}}"
          region: us-west-2
          rules:
            - proto: tcp
              from_port: 5432
              to_port: 5432
              cidr_ip: 172.20.0.0/16
        register: sg_output

      - name: Create Postgres database
        rds:
          command: create
          instance_name: airflowdb
          db_engine: postgres
          size: 10
          instance_type: db.t2.medium
          username: airflow1
          password: airflow1
          vpc_security_groups: "{{sg_output.group_id}}"
          multi_zone: true
          tags:
            Environment: testing
            Application: airflow
          wait: yes
          wait_timeout: 300
        register: postgres_output

      - set_fact:
          postgres_endpoint: "{{postgres_output.instance.endpoint}}"
          redis_endpoint: "{{redis_output.elasticache.data.CacheNodes.0.Endpoint.Address}}"

      - name: Cloning airflow docker code
        git:
          repo: git@github.com:xsamurai/airflow-example.git
          accept_hostkey: true
          dest: /root/example

      - name: Creating airflow config
        template:
          src: /etc/ansible/templates/airflow.tmpl
          dest: /root/example/dockerbuilds/airflow/files/airflow.cfg

      - name: Pushing airflow repo to github
        shell: /bin/push_git.sh


      - name: Create ECS Cluster
        ecs_cluster:
          name: test-cluster
          state: present

      - name: Creating ECS Security group
        ec2_group:
          name: airflow-sg
          description: airflow sg with port 22 & 8080 access
          vpc_id: "{{vpc_id}}"
          region: us-west-2
          rules:
            - proto: tcp
              from_port: 8080
              to_port: 8080
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 10.0.0.0/8
        register: sg_output

      - debug:
          var: sg_output.group_id
       
      - name: 
        local_action:
          module: ec2_elb_lb
          name: "elbtest"
          state: present
          subnets: "{{ subnet_ids }}"
          listeners:
            - protocol: http # options are http, https, ssl, tcp
              load_balancer_port: 80
              instance_port: 8080
              proxy_protocol: True
          health_check:
            ping_protocol: tcp # options are http, https, ssl, tcp
            ping_port: 22
            response_timeout: 5 # seconds
            interval: 30 # seconds
            unhealthy_threshold: 2
            healthy_threshold: 10
        register: elb_output
      
      - debug:
          var: elb_output

      - name: Creating ECS Role
        iam_role:
          name: ecsrole
          assume_role_policy_document: "{{ lookup('file','ecs_role.json') }}"
          state: present

      - name: Creating ECS Launch config
        ec2_lc:
          name: testlc
          state: present
          image_id: ami-29f80351
          security_groups: "{{ sg_output.group_id}}"
          instance_type: t2.micro
          instance_monitoring: yes
          instance_profile_name: "ecsInstanceRole"
        register: ec2_lc

      - name: Creating ECS AutoScaling Group
        ec2_asg:
          name: testasg
          launch_config_name: testlc
          health_check_period: 60
          health_check_type: ELB
          replace_all_instances: yes
          availability_zones: ['us-west-2a', 'us-west-2b', 'us-west-2c']
          min_size: 2
          max_size: 4
          desired_capacity: 2
          vpc_zone_identifier: "{{ subnet_ids }}"
          wait_for_instances: true
          load_balancers: ['elbtest']
        register: ec2_asg


      - ec2_scaling_policy:
          name: "ecs-scaledown-policy"
          asg_name: testasg
          state: present
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: -1
          min_adjustment_step: 1
          cooldown: 300
        register: scale_down

      - ec2_scaling_policy:
          name: "ecs-scaleup-policy"
          asg_name: testasg
          state: present
          adjustment_type: "ChangeInCapacity"
          scaling_adjustment: +1
          min_adjustment_step: 1
          cooldown: 300
        register: scale_up

      - ec2_metric_alarm:
          name: group-high-cpu-alarm
          metric: "CPUUtilization"
          statistic: Average
          comparison: ">="
          threshold: "85"
          period: 300
          evaluation_periods: 2
          unit: "Percent"
          description: "alerm when CPU utilization is >= 85% for 10 minutes."
          dimensions: {"AutoScalingGroupName": 'testasg'}
          alarm_actions: ["{{ scale_up.arn }}"]

      - ec2_metric_alarm:
          name: group-low-cpu-alarm
          metric: "CPUUtilization"
          statistic: Average
          comparison: "<"
          threshold: "50"
          period: 300
          evaluation_periods: 2
          unit: "Percent"
          description: "alerm when CPU utilization is < 50% for 10 minutes."
          dimensions: {"AutoScalingGroupName": 'testasg'}
          alarm_actions: ["{{ scale_down.arn }}"]


      - name: Define ECS tasks
        ecs_taskdefinition:
          containers:
          - name: airflow
            cpu: 10
            essential: true
            image: "fahad0000/airflow:latest"
            memory: 300
            portMappings:
            - containerPort: 8080
              hostPort: 8080
          state: present
          family: airflow
        register: task_output
     
      - name: Create ECS Service
        ecs_service:
          state: present
          name: test-service
          cluster: test-cluster
          task_definition: airflow
          desired_count: 3
          deployment_configuration:
            minimum_healthy_percent: 75
            maximum_percent: 150 

      - name: Debug info for task definitions
        debug:
          msg: "{{task_output}}"

      - name: Run Airflow container(s)
        ecs_task:
          operation: run
          cluster: test-cluster
          task_definition: airflow
          count: 1
          started_by: ansible_user
        register: task_output

      - name: Debug Info for Airflow task start
        debug:
          msg: "{{task_output}}"
      when: cluster == "up"


    - block:
      - name: Deleting RDS
        rds:
          command: delete
          instance_name: airflowdb

      - name: Deleting ElasticCache
        elasticache:
          name: redis-test
          state: absent

      - name: Deleting Auto scaling group
        ec2_asg:
          name: testasg
          state: absent

      - name: Deleting Launch Configuration
        ec2_lc:
          name: testlc
          state: absent

      - name: Deleting ECS Service step 1
        ecs_service:
          name: test-service
          state: present
          cluster: test-cluster
          task_definition: airflow
          desired_count: 0

      - name: Deleting ECS Service step 2
        ecs_service:
          name: test-service
          state: absent
          cluster: test-cluster

      - name: Deleting ECS Cluster
        ecs_cluster:
          name: test-cluster
          state: absent
      
      - name: Deleting ELB
        local_action:
          module: ec2_elb_lb
          name: testelb
          state: absent

      when: cluster == "down"
